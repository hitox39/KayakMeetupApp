// <auto-generated />
using System;
using KayakMeetUpService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KayakMeetUpService.Data.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KayakMeetUpService.Data.Models.Boat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearMade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Boat");
                });

            modelBuilder.Entity("KayakMeetUpService.Data.Models.CasualMeetUpEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<int>("State")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CasualMeetUpEvent", (string)null);
                });

            modelBuilder.Entity("KayakMeetUpService.Data.Models.FishingTournamentEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<int>("PrizePool")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FishingTournamentEvent", (string)null);
                });

            modelBuilder.Entity("KayakMeetUpService.Data.Models.RaceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<int>("PrizePool")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RaceEvent", (string)null);
                });

            modelBuilder.Entity("KayakMeetUpService.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<Guid>("BoatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("State")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("BoatId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("KayakMeetUpService.Data.Models.User", b =>
                {
                    b.HasOne("KayakMeetUpService.Data.Models.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boat");
                });
#pragma warning restore 612, 618
        }
    }
}
